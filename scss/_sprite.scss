// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-arr-select-name: 'icon-arr-select';
$icon-arr-select-x: 0px;
$icon-arr-select-y: 48px;
$icon-arr-select-offset-x: 0px;
$icon-arr-select-offset-y: -48px;
$icon-arr-select-width: 18px;
$icon-arr-select-height: 18px;
$icon-arr-select-total-width: 96px;
$icon-arr-select-total-height: 66px;
$icon-arr-select-image: '../img/sprite.png';
$icon-arr-select: (0px, 48px, 0px, -48px, 18px, 18px, 96px, 66px, '../img/sprite.png', 'icon-arr-select', );
$icon-cross-red-name: 'icon-cross-red';
$icon-cross-red-x: 0px;
$icon-cross-red-y: 0px;
$icon-cross-red-offset-x: 0px;
$icon-cross-red-offset-y: 0px;
$icon-cross-red-width: 38px;
$icon-cross-red-height: 38px;
$icon-cross-red-total-width: 96px;
$icon-cross-red-total-height: 66px;
$icon-cross-red-image: '../img/sprite.png';
$icon-cross-red: (0px, 0px, 0px, 0px, 38px, 38px, 96px, 66px, '../img/sprite.png', 'icon-cross-red', );
$icon-fb-name: 'icon-fb';
$icon-fb-x: 28px;
$icon-fb-y: 48px;
$icon-fb-offset-x: -28px;
$icon-fb-offset-y: -48px;
$icon-fb-width: 17px;
$icon-fb-height: 17px;
$icon-fb-total-width: 96px;
$icon-fb-total-height: 66px;
$icon-fb-image: '../img/sprite.png';
$icon-fb: (28px, 48px, -28px, -48px, 17px, 17px, 96px, 66px, '../img/sprite.png', 'icon-fb', );
$icon-ins-name: 'icon-ins';
$icon-ins-x: 48px;
$icon-ins-y: 0px;
$icon-ins-offset-x: -48px;
$icon-ins-offset-y: 0px;
$icon-ins-width: 21px;
$icon-ins-height: 21px;
$icon-ins-total-width: 96px;
$icon-ins-total-height: 66px;
$icon-ins-image: '../img/sprite.png';
$icon-ins: (48px, 0px, -48px, 0px, 21px, 21px, 96px, 66px, '../img/sprite.png', 'icon-ins', );
$icon-phone-name: 'icon-phone';
$icon-phone-x: 79px;
$icon-phone-y: 27px;
$icon-phone-offset-x: -79px;
$icon-phone-offset-y: -27px;
$icon-phone-width: 16px;
$icon-phone-height: 17px;
$icon-phone-total-width: 96px;
$icon-phone-total-height: 66px;
$icon-phone-image: '../img/sprite.png';
$icon-phone: (79px, 27px, -79px, -27px, 16px, 17px, 96px, 66px, '../img/sprite.png', 'icon-phone', );
$icon-telegram-name: 'icon-telegram';
$icon-telegram-x: 79px;
$icon-telegram-y: 0px;
$icon-telegram-offset-x: -79px;
$icon-telegram-offset-y: 0px;
$icon-telegram-width: 17px;
$icon-telegram-height: 17px;
$icon-telegram-total-width: 96px;
$icon-telegram-total-height: 66px;
$icon-telegram-image: '../img/sprite.png';
$icon-telegram: (79px, 0px, -79px, 0px, 17px, 17px, 96px, 66px, '../img/sprite.png', 'icon-telegram', );
$spritesheet-width: 96px;
$spritesheet-height: 66px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($icon-arr-select, $icon-cross-red, $icon-fb, $icon-ins, $icon-phone, $icon-telegram, );
$spritesheet: (96px, 66px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
